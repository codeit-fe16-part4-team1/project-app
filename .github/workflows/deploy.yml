name: deploy project to EC2

on:
  push:
    branches: [main]

jobs:
  continuous-deployment:
    runs-on: ubuntu-latest
    steps:
      # (선택) 저장소 체크아웃은 로컬 테스트/린트할 때만 필요
      # - name: Git Checkout
      #   uses: actions/checkout@v4

      # (선택) 로컬에서 테스트/빌드를 돌릴 거면 Node 세팅
      # - name: Use Node.js 18.x
      #   uses: actions/setup-node@v4
      #   with:
      #     node-version: 18.x

      - name: Deploy on EC2 (git pull → build → restart)
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            set -e

            [ -s "$HOME/.nvm/nvm.sh" ] && . "$HOME/.nvm/nvm.sh"

            # (EC2에 1회 적용용) 스왑 2GB
            if ! sudo swapon --show | grep -q '/swapfile'; then
              sudo fallocate -l 2G /swapfile || sudo dd if=/dev/zero of=/swapfile bs=1M count=2048
              sudo chmod 600 /swapfile
              sudo mkswap /swapfile
              sudo swapon /swapfile
              echo '/swapfile none swap sw 0 0' | sudo tee -a /etc/fstab
            fi

            cd "${{ secrets.EC2_APP_DIR }}"

            # 최신 코드 가져오기
            git fetch --all
            git reset --hard origin/main

            # 빌드
            HUSKY=0 npm ci
            NODE_ENV=production npm run build

            # 빌드 산출물만 남기고 소스코드/불필요한 파일 삭제
            find . -mindepth 1 -maxdepth 1 \
              ! -name '.git' \
              ! -name '.next' \
              ! -name 'node_modules' \
              ! -name 'package.json' \
              ! -name 'package-lock.json' \
              -exec rm -rf {} +

            # PM2 재시작
            pm2 describe project-final-app > /dev/null \
              && pm2 reload project-final-app \
              || pm2 start "npm run start" --name "project-final-app"
            pm2 save

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: CloudFront Invalidate Cache
        run: aws cloudfront create-invalidation --distribution-id ${{ secrets.CLOUDFRONT_DISTRIBUTION_ID }} --paths "/*"
