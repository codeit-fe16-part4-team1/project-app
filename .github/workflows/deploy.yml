name: deploy project to EC2

on:
  push:
    branches: [main]
  workflow_dispatch:
    inputs:
      force_deploy:
        description: 'Force deploy (true/false)'
        required: false
        default: false
        type: boolean

jobs:
  production-deployment:
    runs-on: ubuntu-latest
    steps:
      # 1) GitHub 저장소 체크아웃
      - name: Checkout
        uses: actions/checkout@v4

      # 2) Node.js 환경 설정
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'
          cache: 'npm'

      # 3) 의존성 설치
      - name: Install dependencies
        run: |
          echo "[DEBUG][GHA] ⌛ npm 의존성 설치 진행 중..."
          npm ci
          echo "[DEBUG][GHA] ✅ npm 의존성 설치 완료"

      # 4) 프로젝트 빌드
      - name: Build project
        env:
          NEXT_PUBLIC_API_BASE_URL: ${{ vars.NEXT_PUBLIC_API_BASE_URL }}
          NEXT_PUBLIC_JS_KEY_KAKAO: ${{ secrets.NEXT_PUBLIC_JS_KEY_KAKAO }}
        run: |
          echo "[DEBUG][GHA] ⌛ 프로덕션 빌드 진행 중..."
          rm -rf .next
          NEXT_CACHE_DISABLED=1 npm run build
          echo "[DEBUG][GHA] ✅ 프로덕션 빌드 완료"

      # 5) 배포용 파일 패키징
      - name: Package deployment files
        run: |
          echo "[DEBUG][GHA] ⌛ 배포용 파일 패키징 진행 중..."

          # 개발 의존성 제거
          BEFORE_SIZE=$(du -sh node_modules | cut -f1)
          npm prune --omit=dev
          AFTER_SIZE=$(du -sh node_modules | cut -f1)
          echo "[DEBUG][GHA] ✅ 개발 의존성 제거 완료"

          # 배포에 필요한 파일들만 선별해서 패키징
          mkdir -p deploy-package

          # Next.js 빌드 결과물
          cp -r .next deploy-package/
          cp -r public deploy-package/ 2>/dev/null || true

          # 런타임에 필요한 파일들
          cp package.json deploy-package/
          cp package-lock.json deploy-package/ 2>/dev/null || true
          cp next.config.* deploy-package/ 2>/dev/null || true

          # 최적화된 프로덕션 의존성
          cp -r node_modules deploy-package/

          PACKAGE_SIZE=$(du -sh deploy-package | cut -f1)

          # 압축
          cd deploy-package
          echo "[DEBUG][GHA] ⌛ 고압축 진행 중..."
          tar -czf ../production-app.tar.gz --exclude='node_modules/*/.cache' --exclude='node_modules/*/coverage' .
          cd ..
          rm -rf deploy-package

          FINAL_SIZE=$(du -sh production-app.tar.gz | cut -f1)

          RED="\033[1;31m"
          GREEN="\033[1;32m"
          BLUE="\033[1;34m"
          CYAN="\033[1;36m"
          RESET="\033[0m"

          echo ""
          echo -e "${BLUE}====================== 📦 패키징 정보 ======================${RESET}"
          printf "${CYAN}%-30s${RESET} | %s\n" "Full node_modules size" "$BEFORE_SIZE"
          printf "${CYAN}%-30s${RESET} | %s\n" "Production node_modules size" "$AFTER_SIZE"
          printf "${CYAN}%-30s${RESET} | %s\n" "Deploy package size" "$PACKAGE_SIZE"
          printf "${CYAN}%-30s${RESET} | %s\n" "Final compressed size" "$FINAL_SIZE"
          echo -e "${BLUE}=============================================================${RESET}"
          echo ""
          echo "[DEBUG][GHA] ✅ 배포용 파일 패키징 완료"

      # 6) EC2에 프로덕션 배포
      - name: Deploy to Production EC2
        env:
          EC2_HOST: ${{ secrets.EC2_HOST }}
          EC2_SSH_KEY: ${{ secrets.EC2_SSH_KEY }}
          EC2_APP_DIR: ${{ secrets.EC2_APP_DIR }}
        run: |
          echo "[DEBUG][GHA] ⌛ SSH Key 설정 진행 중..."
          mkdir -p ~/.ssh
          echo "${EC2_SSH_KEY}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          echo "[DEBUG][GHA] ✅ SSH Key 설정 완료"

          echo "[DEBUG][GHA] ⌛ EC2 인스턴스로 파일 복사 진행 중..."
          echo "[DEBUG][GHA] 🔍 복사 전 EC2 메모리: $(ssh -o StrictHostKeyChecking=no ubuntu@"${EC2_HOST}" "free -h | grep '^Mem:' | awk '{print \$3 \"/\" \$2}'")"


          # EC2에서 메모리 모니터링 시작 (실시간 출력)
          ssh -o StrictHostKeyChecking=no ubuntu@"${EC2_HOST}" "
          (while true; do
            CURRENT_MEM=\$(free -m | grep '^Mem:' | awk '{print \$3}')
            TOTAL_MEM=\$(free -m | grep '^Mem:' | awk '{print \$2}')
            PERCENT=\$(echo \"scale=1; \$CURRENT_MEM * 100 / \$TOTAL_MEM\" | bc -l)
            echo \"[MONITOR] \$(date '+%H:%M:%S') - 메모리: \${CURRENT_MEM}MB/\${TOTAL_MEM}MB (\${PERCENT}%)\"
            sleep 1
          done) &
          echo \$! > /tmp/monitor.pid
          " &

          scp -o StrictHostKeyChecking=no production-app.tar.gz ubuntu@${EC2_HOST}:/tmp/

          # 모니터링 종료
          ssh -o StrictHostKeyChecking=no ubuntu@"${EC2_HOST}" "
          sleep 2
          kill \$(cat /tmp/monitor.pid) 2>/dev/null || true
          rm -f /tmp/monitor.pid
          "

          echo "[DEBUG][GHA] 🔍 복사 후 EC2 메모리: $(ssh -o StrictHostKeyChecking=no ubuntu@"${EC2_HOST}" "free -h | grep '^Mem:' | awk '{print \$3 \"/\" \$2}'")"
          echo "[DEBUG][GHA] ✅ EC2 인스턴스로 파일 복사 완료"

          echo "[DEBUG][GHA] ⌛ EC2 인스턴스 연결 진행 중..."
          ssh -o StrictHostKeyChecking=no ubuntu@${EC2_HOST} bash <<'EOSSH'
          set -euo pipefail

          echo "[DEBUG][EC2] ✅ EC2 인스턴스 연결 완료"

          APP_DIR="/home/ubuntu/project-app"

          echo "[DEBUG][EC2] ✅ 현재 디렉토리: ${APP_DIR}"

          echo "[DEBUG][EC2] ⌛ 이전 프로덕션 프로세스 정리 진행 중..."
          pm2 delete "project-final-app" 2>/dev/null || echo "기존 프로세스 없음"
          echo "[DEBUG][EC2] ✅ 이전 프로덕션 프로세스 정리 완료"

          echo "[DEBUG][EC2] ⌛ 새 버전 배포 진행 중..."

          cd "${APP_DIR}"

          # 기존 빌드 파일들 정리
          rm -rf .next/ node_modules/

          # 새 버전 압축 해제
          echo "[DEBUG][EC2] 🔍 압축 해제 전 메모리: $(free -h | grep '^Mem:' | awk '{print $3 "/" $2}')"

          # EC2에서 압축 해제 중 메모리 모니터링
          (while true; do
            CURRENT_MEM=$(free -m | grep '^Mem:' | awk '{print $3}')
            TOTAL_MEM=$(free -m | grep '^Mem:' | awk '{print $2}')
            PERCENT=$(echo "scale=1; $CURRENT_MEM * 100 / $TOTAL_MEM" | bc -l)
            echo "[MONITOR] $(date '+%H:%M:%S') - 메모리: ${CURRENT_MEM}MB/${TOTAL_MEM}MB (${PERCENT}%)"
            sleep 1
          done) &
          MONITOR_PID=$!

          tar -xzf /tmp/production-app.tar.gz -C .
          rm -f /tmp/production-app.tar.gz

          # 모니터링 종료 전에 잠시 대기
          sleep 3
          kill $MONITOR_PID 2>/dev/null || true

          echo "[DEBUG][EC2] 🔍 압축 해제 후 메모리: $(free -h | grep '^Mem:' | awk '{print $3 "/" $2}')"
          echo "[DEBUG][EC2] ✅ 빌드된 파일 압축 해제 완료"

          echo "[DEBUG][EC2] ⌛ 프로덕션 서버 시작 진행 중..."
          pm2 start "npm run start" --name "project-final-app"
          pm2 save

          # 헬스체크
          sleep 5
          if curl -f http://localhost:3000 > /dev/null 2>&1; then
            echo "[DEBUG][EC2] ✅ 프로덕션 서버 정상 시작 확인"
          else
            echo "[ERROR][EC2] ❌ 프로덕션 서버 시작 실패"
            pm2 logs project-final-app --lines 20
            exit 1
          fi

          # 리소스 현황
          echo "[DEBUG][EC2] 📊 현재 리소스 현황:"
          echo "Memory: $(free -h | awk '/^Mem:/ {print $3"/"$2}')"
          echo "Disk: $(df -h / | awk 'NR==2 {print $3"/"$2" ("$5")"}')"

          EOSSH

          echo "[DEBUG][GHA] ✅ 프로덕션 배포 완료"

      # 7) 배포 결과 요약
      - name: Deployment Summary
        run: |
          echo ""
          echo "🚀 ===== Production Info ====="
          echo "✅ Branch: main"
          echo "✅ Server: ${{ secrets.EC2_HOST }}"
          echo "✅ 디렉토리: ${{ secrets.EC2_APP_DIR }}"
          echo "✅ 포트: 3000"
          echo "✅ 시간: $(date '+%Y-%m-%d %H:%M:%S')"
          echo "================================"
