name: Auto Update Week Field on Start Date Change

# GitHub Project의 Start Date 필드가 변경되면 자동으로 Week 필드 업데이트
on:
  schedule:
    # 매일 자정에 실행 (필요시 더 자주 실행하도록 변경 가능)
    - cron: '0 0 * * *'
  workflow_dispatch:
    inputs:
      force_update:
        description: 'Force update all items'
        required: false
        default: 'false'
        type: choice
        options:
          - 'true'
          - 'false'

jobs:
  update-week-fields:
    runs-on: ubuntu-latest

    steps:
      - name: Get all project items with start dates
        id: get-items
        env:
          GITHUB_TOKEN: ${{ secrets.PROJECT_TOKEN }}
          PROJECT_ID: ${{ vars.PROJECT_ID }}
        run: |
          echo "Fetching project items with start dates..."

          # 프로젝트의 모든 아이템과 필드 값들을 조회
          query='query($projectId: ID!) {
            node(id: $projectId) {
              ... on ProjectV2 {
                title
                items(first: 100) {
                  nodes {
                    id
                    fieldValues(first: 20) {
                      nodes {
                        ... on ProjectV2ItemFieldDateValue {
                          field {
                            ... on ProjectV2Field {
                              id
                              name
                            }
                          }
                          date
                        }
                        ... on ProjectV2ItemFieldIterationValue {
                          field {
                            ... on ProjectV2IterationField {
                              id
                              name
                            }
                          }
                          iterationId
                          title
                        }
                      }
                    }
                    content {
                      ... on Issue {
                        id
                        number
                        title
                        repository {
                          name
                        }
                      }
                    }
                  }
                }
              }
            }
          }'

          response=$(gh api graphql -f query="$query" -f projectId="$PROJECT_ID")

          # JSON 파일로 저장
          echo "$response" > project_items.json

          # 아이템 개수 확인
          item_count=$(echo "$response" | jq -r '.data.node.items.nodes | length')
          echo "Found $item_count project items"
          echo "item_count=$item_count" >> $GITHUB_OUTPUT

      - name: Get week field iterations
        id: get-week-iterations
        env:
          GITHUB_TOKEN: ${{ secrets.PROJECT_TOKEN }}
          WEEK_FIELD_ID: ${{ vars.WEEK_FIELD_ID }}
        run: |
          echo "Getting week field iterations..."

          # Week 필드의 iteration 정보 조회
          query='query($fieldId: ID!) {
            node(id: $fieldId) {
              ... on ProjectV2IterationField {
                id
                name
                configuration {
                  iterations {
                    id
                    title
                    startDate
                  }
                }
              }
            }
          }'

          response=$(gh api graphql -f query="$query" -f fieldId="$WEEK_FIELD_ID")
          iterations=$(echo "$response" | jq -r '.data.node.configuration.iterations')

          echo "Week iterations: $iterations"
          echo "$iterations" > week_iterations.json

      - name: Update week fields based on start dates
        env:
          GITHUB_TOKEN: ${{ secrets.PROJECT_TOKEN }}
          PROJECT_ID: ${{ vars.PROJECT_ID }}
          START_DATE_FIELD_ID: ${{ vars.START_DATE_FIELD_ID }}
          WEEK_FIELD_ID: ${{ vars.WEEK_FIELD_ID }}
        run: |
          echo "Processing items to update week fields..."

          # Start date에 맞는 week iteration 찾기
          get_week_for_date() {
            local start_date=$1
            local iterations=$(cat week_iterations.json)
            
            # start_date를 Unix timestamp로 변환  
            start_timestamp=$(date -d "$start_date" +%s 2>/dev/null)
            if [ $? -ne 0 ]; then
              echo ""
              return
            fi
            
            # 가장 적절한 iteration 찾기 (start_date 이후 가장 가까운 iteration)
            best_iteration=""
            best_id=""
            min_diff=9999999999
            
            echo "$iterations" | jq -r '.[] | "\(.id)|\(.title)|\(.startDate)"' | while read -r line; do
              if [ -n "$line" ]; then
                iteration_id=$(echo "$line" | cut -d'|' -f1)
                iteration_title=$(echo "$line" | cut -d'|' -f2) 
                iteration_start=$(echo "$line" | cut -d'|' -f3)
                
                # iteration 시작일을 timestamp로 변환
                iteration_timestamp=$(date -d "$iteration_start" +%s 2>/dev/null)
                
                if [ $? -eq 0 ] && [ "$iteration_timestamp" -gt 0 ]; then
                  # start_date가 iteration 시작일 이후인 경우만 고려
                  if [ "$start_timestamp" -ge "$iteration_timestamp" ]; then
                    diff=$((start_timestamp - iteration_timestamp))
                    if [ "$diff" -lt "$min_diff" ]; then
                      echo "$iteration_title|$iteration_id"
                      return
                    fi
                  fi
                fi
              fi
            done
            
            echo ""
          }

          processed=0
          updated=0
          errors=0

          # 각 프로젝트 아이템 처리
          while IFS= read -r item; do
            if [ -n "$item" ] && [ "$item" != "null" ]; then
              item_id=$(echo "$item" | jq -r '.id')
              issue_number=$(echo "$item" | jq -r '.content.number // "N/A"')
              issue_title=$(echo "$item" | jq -r '.content.title // "N/A"')
              
              echo "Processing item: #$issue_number - $issue_title"
              
              # Start Date 값 찾기
              start_date=$(echo "$item" | jq -r --arg field_id "$START_DATE_FIELD_ID" '
                .fieldValues.nodes[] | 
                select(.field.id == $field_id and .date != null) | 
                .date
              ' 2>/dev/null)
              
              # 현재 Week 값 찾기
              current_week_iteration_id=$(echo "$item" | jq -r --arg field_id "$WEEK_FIELD_ID" '
                .fieldValues.nodes[] | 
                select(.field.id == $field_id and .iterationId != null) | 
                .iterationId
              ' 2>/dev/null)
              
              current_week_title=$(echo "$item" | jq -r --arg field_id "$WEEK_FIELD_ID" '
                .fieldValues.nodes[] | 
                select(.field.id == $field_id and .title != null) | 
                .title
              ' 2>/dev/null)
              
              if [ -n "$start_date" ] && [ "$start_date" != "null" ]; then
                echo "  Start date: $start_date"
                echo "  Current week: $current_week_title"
                
                # Start date에 맞는 week iteration 결정
                week_result=$(get_week_for_date "$start_date")
                
                if [ -n "$week_result" ]; then
                  target_week_title=$(echo "$week_result" | cut -d'|' -f1)
                  target_week_id=$(echo "$week_result" | cut -d'|' -f2)
                  echo "  Target week: $target_week_title (ID: $target_week_id)"
                  
                  # 현재 week와 다른 경우에만 업데이트
                  if [ "$current_week_iteration_id" != "$target_week_id" ]; then
                    echo "  Updating week to: $target_week_title"
                    
                    # Week iteration 필드 업데이트
                    update_response=$(gh api graphql \
                      -f query='mutation($projectId: ID!, $itemId: ID!, $fieldId: ID!, $iterationId: String!) {
                        updateProjectV2ItemFieldValue(input: {
                          projectId: $projectId,
                          itemId: $itemId,
                          fieldId: $fieldId,
                          value: {
                            iterationId: $iterationId
                          }
                        }) {
                          projectV2Item {
                            id
                          }
                        }
                      }' \
                      -f projectId="$PROJECT_ID" \
                      -f itemId="$item_id" \
                      -f fieldId="$WEEK_FIELD_ID" \
                      -f iterationId="$target_week_id")
                    
                    if echo "$update_response" | jq -e '.data.updateProjectV2ItemFieldValue.projectV2Item.id' > /dev/null; then
                      echo "  ✓ Successfully updated week to $target_week_title"
                      ((updated++))
                    else
                      echo "  ✗ Failed to update week field"
                      echo "  Response: $update_response"
                      ((errors++))
                    fi
                  else
                    echo "  ✓ Week already correct, no update needed"
                  fi
                else
                  echo "  - Start date $start_date doesn't match any week range"
                fi
              else
                echo "  - No start date set"
                
                # Start date가 없는데 week 필드에 값이 있으면 비우기
                if [ -n "$current_week_title" ] && [ "$current_week_title" != "null" ]; then
                  echo "  Clearing week field (no start date)"
                  
                  # Week 필드 비우기
                  clear_response=$(gh api graphql \
                    -f query='mutation($projectId: ID!, $itemId: ID!, $fieldId: ID!) {
                      clearProjectV2ItemFieldValue(input: {
                        projectId: $projectId,
                        itemId: $itemId,
                        fieldId: $fieldId
                      }) {
                        projectV2Item {
                          id
                        }
                      }
                    }' \
                    -f projectId="$PROJECT_ID" \
                    -f itemId="$item_id" \
                    -f fieldId="$WEEK_FIELD_ID")
                  
                  if echo "$clear_response" | jq -e '.data.clearProjectV2ItemFieldValue.projectV2Item.id' > /dev/null; then
                    echo "  ✓ Successfully cleared week field"
                    ((updated++))
                  else
                    echo "  ✗ Failed to clear week field"
                    echo "  Response: $clear_response"
                    ((errors++))
                  fi
                else
                  echo "  ✓ Week field already empty, no action needed"
                fi
              fi
              
              ((processed++))
              sleep 0.5
            fi
          done <<< "$(jq -c '.data.node.items.nodes[]' project_items.json)"

          echo ""
          echo "Update Summary:"
          echo "  • Total processed: $processed"
          echo "  • Week fields updated: $updated"
          echo "  • Errors: $errors"

      - name: Cleanup
        run: |
          rm -f project_items.json week_iterations.json
