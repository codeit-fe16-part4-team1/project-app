name: PR Preview to EC2

on:
  push:
    branches-ignore:
      - main
      - '*-story'

jobs:
  continuous-deployment:
    runs-on: ubuntu-latest
    steps:
      # 1) GitHub 저장소 체크아웃
      - name: Checkout
        uses: actions/checkout@v4

      # 2) 브랜치명 & 포트 계산
      - name: Compute branch name & port
        id: meta
        run: |
          RAW="${{ github.ref_name }}"
          SANITIZED="$(echo "$RAW" | tr '[:upper:]' '[:lower:]' | sed 's#[^a-z0-9._-]#-#g')"
          PORT=$(( 5000 + $(echo -n "$SANITIZED" | cksum | awk '{print $1 % 1000}') ))
          echo "name=$SANITIZED" >> $GITHUB_OUTPUT
          echo "port=$PORT" >> $GITHUB_OUTPUT
          echo "[DEBUG][META] ✅ RAW=$RAW"
          echo "[DEBUG][META] ✅ SANITIZED=$SANITIZED"
          echo "[DEBUG][META] ✅ BASE_PORT=$PORT"

      # 2-1) PORT 값 디버그 출력
      - name: Debug meta outputs
        run: |
          echo "[DEBUG][META] ✅ BRANCH=${{ steps.meta.outputs.name }}"
          echo "[DEBUG][META] ✅ PORT=${{ steps.meta.outputs.port }}"

      # 3) 소스 패키징
      - name: Pack source (git archive snapshot)
        run: |
          echo "[DEBUG][GHA] ⌛ 소스파일 압축 진행 중..."
          git archive --format=tar HEAD | gzip > app.tar.gz
          echo "[DEBUG][GHA] ✅ 소스파일 압축 완료"

      # 4) EC2에 배포
      - name: Copy & Deploy on EC2
        id: deploy
        env:
          BRANCH: ${{ steps.meta.outputs.name }}
          PORT: ${{ steps.meta.outputs.port }}
          DOMAIN: ${{ vars.DOMAIN }}
          EC2_HOST: ${{ secrets.EC2_HOST }}
          EC2_SSH_KEY: ${{ secrets.EC2_SSH_KEY }}
        shell: bash
        run: |
          echo "[DEBUG][GHA] ⌛ SSH Key 설정 진행 중..."
          mkdir -p ~/.ssh
          echo "${EC2_SSH_KEY}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          echo "[DEBUG][GHA] ✅ SSH Key 설정 완료"

          echo "[DEBUG][GHA] ⌛ EC2 인스턴스로 파일 복사 진행 중..."
          scp -o StrictHostKeyChecking=no app.tar.gz deploy/preview.nginx.tpl ubuntu@"${EC2_HOST}":/tmp/
          echo "[DEBUG][GHA] ✅ EC2 인스턴스로 파일 복사 완료"

          echo "[DEBUG][GHA] ⌛ EC2 인스턴스 연결 진행 중..."
          ssh -o StrictHostKeyChecking=no ubuntu@"${EC2_HOST}" bash -se <<'EOSSH'
          set -euo pipefail

          echo "[DEBUG][EC2] ✅ EC2 인스턴스 연결 완료"

          BRANCH="${{ steps.meta.outputs.name }}"
          BASE_PORT="${{ steps.meta.outputs.port }}"
          DOMAIN="${{ vars.DOMAIN }}"
          APP_DIR="/var/www/preview/${BRANCH}"

          echo "[DEBUG][EC2] ✅ PREVIEW 파라미터:"
          echo "[INFO] BRANCH=${BRANCH}"
          echo "[INFO] BASE_PORT=${BASE_PORT}"
          echo "[INFO] DOMAIN=${DOMAIN}"
          echo "[INFO] APP_DIR=${APP_DIR}"

          if [ -z "${BASE_PORT}" ]; then
            echo "[FATAL] ✖️ BASE_PORT is empty"
            exit 1
          fi

          echo "[DEBUG][EC2] ⌛ 앱 디렉토리 생성 진행 중..."
          sudo mkdir -p "${APP_DIR}"
          sudo chown -R ubuntu:ubuntu "${APP_DIR}"
          echo "[DEBUG][EC2] ✅ 앱 디렉토리 생성 완료"

          echo "[DEBUG][EC2] ⌛ 소스코드 압축 해제 진행 중..."
          tar -xzf /tmp/app.tar.gz -C "${APP_DIR}"
          rm -f /tmp/app.tar.gz
          echo "[DEBUG][EC2] ✅ 소스코드 압축 해제 완료"

          cd "${APP_DIR}"
          echo "[DEBUG][EC2] ⌛ npm 의존성 설치 진행 중..."
          if [ -f package-lock.json ]; then
            npm ci
          else
            npm install
          fi
          echo "[DEBUG][EC2] ✅ npm 의존성 설치 완료"

          echo "[DEBUG][EC2] ⌛ 프로젝트 빌드 진행 중..."
          rm -rf .next
          NEXT_CACHE_DISABLED=1 npm run build
          echo "[DEBUG][EC2] ✅ 프로젝트 빌드 완료"

          FINAL_PORT="${BASE_PORT}"
          echo "[DEBUG][EC2] ⌛ 이전 프로세스 정리 진행 중..."
          pm2 delete "preview-${BRANCH}" || true
          sudo fuser -k ${FINAL_PORT}/tcp || true
          echo "[DEBUG][EC2] ✅ 이전 프로세스 정리 완료"

          echo "[DEBUG][EC2] ⌛ PM2 실행 진행 중..."
          pm2 start "node_modules/.bin/next start -p ${FINAL_PORT}" --name "preview-${BRANCH}"
          pm2 save
          echo "[DEBUG][EC2] ✅ PM2 실행 완료"

          echo "[DEBUG][EC2] ⌛ Nginx 설정 생성 진행 중..."
          if [ ! -f /tmp/preview.nginx.tpl ]; then
            echo "[FATAL] /tmp/preview.nginx.tpl not found"
            exit 1
          fi
          export BRANCH DOMAIN FINAL_PORT
          envsubst "\$BRANCH \$DOMAIN \$FINAL_PORT" < /tmp/preview.nginx.tpl \
            | sudo tee /etc/nginx/conf.d/preview-${BRANCH}.conf >/dev/null
          echo "[DEBUG][EC2] ✅ Nginx 설정 생성 완료"

          echo "[DEBUG][EC2] 🔍 Rendered conf head:"
          sudo sed -n "1,80p" /etc/nginx/conf.d/preview-${BRANCH}.conf || true

          echo "[DEBUG][EC2] ⌛ Nginx 설정 테스트 및 재시작 진행 중..."
          sudo nginx -t
          if systemctl is-active --quiet nginx; then
            sudo systemctl reload nginx || sudo nginx -s reload
          else
            sudo systemctl start nginx || sudo nginx
          fi
          echo "[DEBUG][EC2] ✅ Nginx 설정 테스트 및 재시작 완료"

          echo "[DEBUG][EC2] 🔍 현재 Nginx 상태 확인..."
          (systemctl status nginx --no-pager -l || true) | sed -n '1,20p'

          echo "[DEBUG][EC2] 🔍 원본 헤더 확인..."
          curl -sI -H "Host: ${BRANCH}.preview.${DOMAIN}" http://127.0.0.1 \
            | egrep -i "http/|server|cache-control" || true
          EOSSH

          echo "preview_url=https://${BRANCH}.preview.${DOMAIN}" >> $GITHUB_OUTPUT
          echo "branch=${BRANCH}" >> $GITHUB_OUTPUT
          echo "port=${FINAL_PORT}" >> $GITHUB_OUTPUT

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: CloudFront Invalidate Cache
        run: |
          echo "[DEBUG][CF] ⌛ CloudFront 캐시 무효화 진행 중..."
          aws cloudfront create-invalidation --distribution-id ${{ secrets.CLOUDFRONT_DISTRIBUTION_PREVIEW_ID }} --paths "/*"
          echo "[DEBUG][CF] ✅ CloudFront 캐시 무효화 완료"

      # 5) Preview Info 출력
      - name: Print Preview Info
        run: |
          RED="\033[1;31m"
          GREEN="\033[1;32m"
          BLUE="\033[1;34m"
          CYAN="\033[1;36m"
          RESET="\033[0m"

          echo ""
          echo -e "${BLUE}====================== 🚀 Preview Info ======================${RESET}"
          printf "${CYAN}%-15s${RESET} | %s\n" "BRANCH"        "${{ steps.deploy.outputs.branch }}"
          printf "${CYAN}%-15s${RESET} | %s\n" "Preview URL"   "${{ steps.deploy.outputs.preview_url }}"
          printf "${CYAN}%-15s${RESET} | %s\n" "Upstream Port" "${{ steps.meta.outputs.port }}"
          echo -e "${BLUE}=============================================================${RESET}"
          echo ""
