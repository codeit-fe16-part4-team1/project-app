name: PR Preview to EC2

on:
  push:

permissions:
  contents: read
  pull-requests: write

concurrency:
  group: pr-preview-${{ github.ref_name }}
  cancel-in-progress: true

jobs:
  continuous-deployment:
    runs-on: ubuntu-latest
    steps:
      # 1) GitHub 저장소 체크아웃
      - name: Checkout
        uses: actions/checkout@v4

      # 2) 브랜치명 & 포트 계산
      - name: Compute branch name & port
        id: meta
        run: |
          RAW="${{ github.ref_name }}"
          SANITIZED="$(echo "$RAW" \
          | tr '[:upper:]' '[:lower:]' \
          | sed 's/[^a-z0-9-]/-/g' \
          | sed 's/^-*//; s/-*$//' \
          | sed 's/-\{2,\}/-/g')"
          PORT=$(( 5000 + $(echo -n "$SANITIZED" | cksum | awk '{print $1 % 1000}') ))
          echo "raw=$RAW" >> $GITHUB_OUTPUT       # ← 추가
          echo "name=$SANITIZED" >> $GITHUB_OUTPUT
          echo "port=$PORT" >> $GITHUB_OUTPUT

      # 2-1) PORT 값 디버그 출력
      - name: Debug meta outputs
        run: |
          echo "[DEBUG] BRANCH=${{ steps.meta.outputs.name }}"
          echo "[DEBUG] PORT=${{ steps.meta.outputs.port }}"

      # 3) 소스 패키징
      - name: Pack source (git archive snapshot)
        run: |
          git archive --format=tar HEAD | gzip > app.tar.gz

      # 4) EC2에 배포
      - name: Copy & Deploy on EC2
        env:
          BRANCH: ${{ steps.meta.outputs.name }}
          PORT: ${{ steps.meta.outputs.port }}
          DOMAIN: ${{ vars.DOMAIN }}
          EC2_HOST: ${{ secrets.EC2_HOST }}
          EC2_SSH_KEY: ${{ secrets.EC2_SSH_KEY }}
        shell: bash
        run: |
          mkdir -p ~/.ssh
          echo "${EC2_SSH_KEY}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa

          # 앱 아카이브와 nginx 템플릿을 같이 전송
          scp -o StrictHostKeyChecking=no app.tar.gz ubuntu@"${EC2_HOST}":/tmp/

          ssh -o StrictHostKeyChecking=no ubuntu@"${EC2_HOST}" "bash -lc '
          set -euo pipefail
          BRANCH=\"${BRANCH}\"
          BASE_PORT=\"${PORT}\"
          DOMAIN=\"${DOMAIN}\"
          APP_DIR=\"/var/www/preview/\${BRANCH}\"

          if [ -z \"\${BASE_PORT}\" ]; then
            echo \"[FATAL] BASE_PORT is empty\"
            exit 1
          fi

          # === 홈 디렉터리 & PM2 로그 클린업 추가 ===
          rm -f ~/app.tar.gz || true
          npm cache clean --force || true
          pm2 flush || true
          rm -rf ~/.pm2/logs/* || true
          # (옵션) 저널 로그도 정리하고 싶으면:
          # sudo journalctl --vacuum-time=7d || true

          # 기존 브랜치 디렉터리 제거 후 새로 생성
          sudo rm -rf "\${APP_DIR}"
          sudo mkdir -p "\${APP_DIR}"
          sudo chown -R ubuntu:ubuntu "\${APP_DIR}"

          # 코드 전개
          tar -xzf /tmp/app.tar.gz -C \"\${APP_DIR}\"
          rm -f /tmp/app.tar.gz
          export HUSKY=0
          cd \"\${APP_DIR}\"
          if [ -f package-lock.json ]; then
            npm ci
          else
            npm install
          fi
          npm run build

          # (포트 선정 전에) 혹시 있던 프로세스 정리
          pm2 delete "preview-${BRANCH}" || true
          pm2 save

          # ===== 포트 할당: BASE_PORT ~ BASE_PORT+200 사이에서 빈 포트 찾기 (ss 기반) =====
          pick_port() {
            local start="$1"
            local end=$(( start + 200 ))

            for p in $(seq "$start" "$end"); do
              # -H: header 제거, 결과가 비어있으면 LISTEN 중인 프로세스가 없음 = 사용 가능
              if ! ss -ltnH "sport = :$p" | grep -q .; then
                echo "$p"
                return 0
              fi
            done
            return 1
          }

          FINAL_PORT="$(pick_port "${BASE_PORT}")" || {
            echo "[FATAL] No free port near ${BASE_PORT}"
            exit 1
          }
          echo "[INFO] Using port ${FINAL_PORT} for ${BRANCH}"

          # ===== PM2로 Next.js 시작 (CWD 고정 + 환경 저장) =====
          pm2 start "node_modules/.bin/next start -p ${FINAL_PORT}" --name "preview-${BRANCH}" --cwd "${APP_DIR}" --update-env
          pm2 save

          # ===== Nginx vhost를 최종 포트로 생성 =====
          export BRANCH DOMAIN FINAL_PORT
          envsubst '${BRANCH} ${DOMAIN} ${FINAL_PORT}' <<'NGINX' | sudo tee /etc/nginx/conf.d/preview-${BRANCH}.conf >/dev/null
          server {
            listen 80;
            server_name ${BRANCH}.preview.${DOMAIN};

            location / {
              proxy_http_version 1.1;
              proxy_set_header Host $host;
              proxy_set_header X-Real-IP $remote_addr;
              proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
              proxy_set_header X-Forwarded-Proto $scheme;
              proxy_set_header Upgrade $http_upgrade;
              proxy_set_header Connection "upgrade";
              proxy_pass http://127.0.0.1:${FINAL_PORT};
            }
          }
          NGINX

          sudo nginx -t
          sudo systemctl reload nginx

          echo \"[INFO] Preview URL: https://\${BRANCH}.preview.\${DOMAIN}\"
          echo \"[INFO] Upstream port: \${FINAL_PORT}\"
          '"

      # 6) 미리보기 URL 출력 (=> 코멘트에서 쓰기 위해 output으로 노출)
      - name: Output Preview URL
        id: url
        env:
          BRANCH: ${{ steps.meta.outputs.name }}
          DOMAIN: ${{ vars.DOMAIN }}
        run: |
          echo "url=https://${BRANCH}.preview.${DOMAIN}" >> "$GITHUB_OUTPUT"

      # ── PR 코멘트 업서트(배포 결과 반영) ──
      # 브랜치에 열린 PR을 조회
      - name: Find open PR for this branch
        id: get-pr
        uses: actions/github-script@v7
        with:
          script: |
            const owner = context.repo.owner;
            const repo  = context.repo.repo;
            const head  = `${owner}:${process.env.RAW}`;  // ← 원래 브랜치명으로 조회
            const res = await github.rest.pulls.list({ owner, repo, state: 'open', head, per_page: 10 });
            const pr = res.data[0];
            core.setOutput('number', pr ? String(pr.number) : '');
        env:
          RAW: ${{ steps.meta.outputs.raw }}

      # 기존 코멘트 식별(없으면 빈 값)
      - name: Find existing preview comment
        if: ${{ steps.get-pr.outputs.number != '' }}
        id: find-comment
        uses: peter-evans/find-comment@v3
        with:
          issue-number: ${{ steps.get-pr.outputs.number }}
          comment-author: 'github-actions[bot]'
          body-includes: '<!-- preview-comment:${{ steps.meta.outputs.name }} -->'

      # 성공 시 Ready 로 갱신
      - name: Upsert comment (success)
        if: ${{ steps.get-pr.outputs.number != '' && success() }}
        uses: peter-evans/create-or-update-comment@v4
        with:
          comment-id: ${{ steps.find-comment.outputs.comment-id }}
          issue-number: ${{ steps.get-pr.outputs.number }}
          edit-mode: replace
          body: |
            <!-- preview-comment:${{ steps.meta.outputs.name }} -->
            ✅ **Preview ready**
            | Field | Value |
            |---|---|
            | Branch | `${{ steps.meta.outputs.name }}` |
            | Commit | `${{ github.sha }}` |
            | Preview | ${{ steps.url.outputs.url }} |
            | Logs | [View run](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}) |

      # 실패 시 Failed 로 갱신
      - name: Upsert comment (failure)
        if: ${{ steps.get-pr.outputs.number != '' && failure() }}
        uses: peter-evans/create-or-update-comment@v4
        with:
          comment-id: ${{ steps.find-comment.outputs.comment-id }}
          issue-number: ${{ steps.get-pr.outputs.number }}
          edit-mode: replace
          body: |
            <!-- preview-comment:${{ steps.meta.outputs.name }} -->
            ❌ **Preview failed**
            | Field | Value |
            |---|---|
            | Branch | `${{ steps.meta.outputs.name }}` |
            | Commit | `${{ github.sha }}` |
            | Preview | _unavailable_ |
            | Logs | [View run](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}) |
