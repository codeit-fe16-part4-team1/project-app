name: PR Preview to EC2

on:
  push:
    branches-ignore:
      - main

jobs:
  continuous-deployment:
    runs-on: ubuntu-latest
    steps:
      # 1) GitHub 저장소 체크아웃
      - name: Checkout
        uses: actions/checkout@v4

      # 2) 브랜치명 & 포트 계산
      - name: Compute branch name & port
        id: meta
        run: |
          RAW="${{ github.ref_name }}"
          SANITIZED="$(echo "$RAW" | tr '[:upper:]' '[:lower:]' | sed 's#[^a-z0-9._-]#-#g')"
          PORT=$(( 5000 + $(echo -n "$SANITIZED" | cksum | awk '{print $1 % 1000}') ))
          echo "name=$SANITIZED" >> $GITHUB_OUTPUT
          echo "port=$PORT" >> $GITHUB_OUTPUT
          echo "[DEBUG] RAW=$RAW"
          echo "[DEBUG] SANITIZED=$SANITIZED"
          echo "[DEBUG] BASE_PORT=$PORT"

      # 2-1) PORT 값 디버그 출력
      - name: Debug meta outputs
        run: |
          echo "[DEBUG] BRANCH=${{ steps.meta.outputs.name }}"
          echo "[DEBUG] PORT=${{ steps.meta.outputs.port }}"

      # 3) 소스 패키징
      - name: Pack source (git archive snapshot)
        run: |
          echo "[DEBUG][GHA] Creating source archive..."
          git archive --format=tar HEAD | gzip > app.tar.gz

      # 4) EC2에 배포
      - name: Copy & Deploy on EC2
        env:
          BRANCH: ${{ steps.meta.outputs.name }}
          PORT: ${{ steps.meta.outputs.port }}
          DOMAIN: ${{ vars.DOMAIN }}
          EC2_HOST: ${{ secrets.EC2_HOST }}
          EC2_SSH_KEY: ${{ secrets.EC2_SSH_KEY }}
        shell: bash
        run: |
          echo "[DEBUG][GHA] Setting up SSH key..."
          mkdir -p ~/.ssh
          echo "${EC2_SSH_KEY}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa

          # 앱 아카이브와 nginx 템플릿을 같이 전송
          echo "[DEBUG][GHA] Transferring files to EC2..."
          scp -o StrictHostKeyChecking=no app.tar.gz deploy/preview.nginx.tpl ubuntu@"${EC2_HOST}":/tmp/

          echo "[DEBUG][GHA] Connecting to EC2..."

          ssh -o StrictHostKeyChecking=no ubuntu@"${EC2_HOST}" bash -se <<'EOSSH'
          set -euo pipefail

          # === GitHub Actions 값 주입 (여기서 GH 컨텍스트는 이미 치환된 문자열이 됨) ===
          BRANCH="${{ steps.meta.outputs.name }}"
          BASE_PORT="${{ steps.meta.outputs.port }}"
          DOMAIN="${{ vars.DOMAIN }}"
          APP_DIR="/var/www/preview/${BRANCH}"

          echo "[DEBUG][EC2] Params:"
          echo "  BRANCH=${BRANCH}"
          echo "  BASE_PORT=${BASE_PORT}"
          echo "  DOMAIN=${DOMAIN}"
          echo "  APP_DIR=${APP_DIR}"

          if [ -z "${BASE_PORT}" ]; then
            echo "[FATAL] BASE_PORT is empty"
            exit 1
          fi

          # === 앱 디렉토리 & 코드 전개 ===
          echo "[DEBUG][EC2] Creating app directory..."
          sudo mkdir -p "${APP_DIR}"
          sudo chown -R ubuntu:ubuntu "${APP_DIR}"

          echo "[DEBUG][EC2] Extracting app archive..."
          tar -xzf /tmp/app.tar.gz -C "${APP_DIR}"
          rm -f /tmp/app.tar.gz

          cd "${APP_DIR}"
          echo "[DEBUG][EC2] Installing dependencies..."
          if [ -f package-lock.json ]; then
            npm ci
          else
            npm install
          fi

          echo "[DEBUG][EC2] Building project..."
          rm -rf .next
          NEXT_CACHE_DISABLED=1 npm run build

          # === 포트/PM2 ===
          FINAL_PORT="${BASE_PORT}"
          echo "[DEBUG][EC2] Using port: ${FINAL_PORT}"
          echo "[DEBUG][EC2] Cleaning old processes..."
          pm2 delete "preview-${BRANCH}" || true
          sudo fuser -k ${FINAL_PORT}/tcp || true

          echo "[DEBUG][EC2] Starting PM2..."
          pm2 start "node_modules/.bin/next start -p ${FINAL_PORT}" --name "preview-${BRANCH}"
          pm2 save

          # === Nginx vhost 생성: 템플릿 + envsubst(치환 변수 '목록' 제한) ===
          echo "[DEBUG][EC2] Generating Nginx config..."
          if [ ! -f /tmp/preview.nginx.tpl ]; then
            echo "[FATAL] /tmp/preview.nginx.tpl not found (scp 단계 확인)"
            exit 1
          fi

          export BRANCH DOMAIN FINAL_PORT
          envsubst "\$BRANCH \$DOMAIN \$FINAL_PORT" < /tmp/preview.nginx.tpl \
            | sudo tee /etc/nginx/conf.d/preview-${BRANCH}.conf >/dev/null

          echo "[DEBUG][EC2] Rendered conf head:"
          sudo sed -n "1,80p" /etc/nginx/conf.d/preview-${BRANCH}.conf || true

          echo "[DEBUG][EC2] Testing and reloading Nginx..."
          sudo nginx -t
          sudo systemctl reload nginx

          echo "[DEBUG][EC2] Origin header check:"
          curl -sI -H "Host: ${BRANCH}.preview.${DOMAIN}" http://127.0.0.1 \
            | egrep -i "http/|server|cache-control" || true

          echo "[INFO] Preview URL: https://${BRANCH}.preview.${DOMAIN}"
          echo "[INFO] Upstream port: ${FINAL_PORT}"
          EOSSH
