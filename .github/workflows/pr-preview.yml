name: PR Preview to EC2

on:
  pull_request:
    types: [opened, synchronize]
    branches: [main]

jobs:
  continuous-deployment:
    runs-on: ubuntu-latest
    steps:
      # 1) GitHub 저장소 체크아웃
      - name: Checkout
        uses: actions/checkout@v4

      # 2) 브랜치명 & 포트 계산
      - name: Compute branch name & port
        id: meta
        run: |
          RAW="${{ github.head_ref }}"
          SANITIZED="$(echo "$RAW" | tr '[:upper:]' '[:lower:]' | sed 's#[^a-z0-9._-]#-#g')"
          PORT=$(( 5000 + $(echo -n "$SANITIZED" | cksum | awk '{print $1 % 1000}') ))
          echo "name=$SANITIZED" >> $GITHUB_OUTPUT
          echo "port=$PORT" >> $GITHUB_OUTPUT

      # 3) 소스 패키징
      - name: Pack source (git archive snapshot)
        run: |
          git archive --format=tar HEAD | gzip > app.tar.gz

      # 4) Nginx vhost 설정 파일 생성
      - name: Create Nginx config locally
        env:
          BRANCH: ${{ steps.meta.outputs.name }}
          PORT: ${{ steps.meta.outputs.port }}
          DOMAIN: ${{ secrets.PREVIEW_DOMAIN }}
        run: |
          cat > preview-${BRANCH}.conf <<EOF
          server {
            listen 80;
            server_name ${BRANCH}.preview.${DOMAIN};

            location / {
              proxy_http_version 1.1;
              proxy_set_header Host \$host;
              proxy_set_header X-Real-IP \$remote_addr;
              proxy_set_header Upgrade \$http_upgrade;
              proxy_set_header Connection "upgrade";
              proxy_pass http://127.0.0.1:${PORT};
            }
          }
          EOF

      # 5) EC2에 배포
      - name: Copy & Deploy on EC2
        env:
          BRANCH: ${{ steps.meta.outputs.name }}
          PORT: ${{ steps.meta.outputs.port }}
          DOMAIN: ${{ secrets.PREVIEW_DOMAIN }}
          EC2_HOST: ${{ secrets.EC2_HOST }}
          EC2_SSH_KEY: ${{ secrets.EC2_SSH_KEY }}
        shell: bash
        run: |
          mkdir -p ~/.ssh
          echo "${EC2_SSH_KEY}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa

          # 앱 코드 & Nginx conf 전송
          scp -o StrictHostKeyChecking=no app.tar.gz preview-${BRANCH}.conf ubuntu@"${EC2_HOST}":/tmp/

          # 원격 실행
          ssh -o StrictHostKeyChecking=no ubuntu@"${EC2_HOST}" "bash -lc '
          set -euo pipefail
          BRANCH=\"${BRANCH}\"
          PORT=\"${PORT}\"
          DOMAIN=\"${DOMAIN}\"
          APP_DIR=\"/var/www/preview/\${BRANCH}\"

          # 앱 디렉토리 준비
          sudo mkdir -p \"\${APP_DIR}\"
          sudo chown -R ubuntu:ubuntu \"\${APP_DIR}\"

          # 코드 배포
          tar -xzf /tmp/app.tar.gz -C \"\${APP_DIR}\"
          rm -f /tmp/app.tar.gz

          # Nginx 설정 이동
          sudo mv /tmp/preview-\${BRANCH}.conf /etc/nginx/conf.d/

          # 빌드 준비
          cd \"\${APP_DIR}\"
          if [ -f package-lock.json ]; then
            npm ci
          else
            npm install
          fi
          npm run build

          # 1) 기존 PM2 프로세스 제거
          pm2 delete \"preview-\${BRANCH}\" || true

          # 2) 같은 포트를 쓰는 모든 프로세스 종료
          lsof -ti :\${PORT} | xargs --no-run-if-empty kill -9 || true

          # 3) 새 PM2 프로세스 실행
          pm2 start \"node_modules/.bin/next start -p \${PORT}\" --name \"preview-\${BRANCH}\"
          pm2 save

          # Nginx 설정 검사 & 재시작
          sudo nginx -t
          sudo systemctl reload nginx
          '"

      # 6) 미리보기 URL 출력
      - name: Output Preview URL
        env:
          BRANCH: ${{ steps.meta.outputs.name }}
          DOMAIN: ${{ secrets.PREVIEW_DOMAIN }}
        run: echo "https://${BRANCH}.preview.${DOMAIN}"
